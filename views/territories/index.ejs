<%- include("../partials/header") %>

    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="text-center">Tereny zboru <%= currentUser.username %>: strona <%= result.page %> z <%= result.totalPages %></h1>
            </div>
        </div>
        <%- include("../partials/territorySearch") %>
        <div class="row">
            <div class="col-lg-12 limitChoose">
                <h5 style="color: black;">Liczba terenów na stronę: </h5>
                <span>
                    <a href="/territories?limit=20">20</a>
                </span>
                <span>
                    <a href="/territories?limit=40">40</a>
                </span>
                <span>
                    <a href="/territories?limit=60">60</a>
                </span>
                <span>
                    <a href="/territories?limit=80">80</a>
                </span>
                <span>
                    <a href="/territories?limit=100">100</a>
                </span>
            </div>
        </div>
        <% if (currentUser.mainCity) { %>
            <div class="d-none" id="mainCityLatitude"><%= currentUser.mainCityLatitude %></div>
            <div class="d-none" id="mainCityLongitude"><%= currentUser.mainCityLongitude %></div>
            <div id="map" style="width: 100%; height: 400px; margin: 30px 0 "></div>
        <% } else { %>
            <div class="row justify-content-center">
                <div class="col-lg-12">
                    <div class="alert alert-info text-center info" role="alert">
                        <strong>
                            Wejdź w zakładkę <em>Zbór</em> i uzupełnij pole <em>Główne miasto zboru</em>, żeby zobaczyć niespodziankę. 
                            Żeby odnieść z niej jak najwięcej korzyści zalecamy uzupełnić pole <em>Pełna lokalizacja</em> we wszystkich wolnych terenach.
                        </strong>
                    </div>
                </div>
            </div>
        <% } %>
        
        <% if(result.docs.length===0){ %>
            <div class="row justify-content-center">
                <div class="col-lg-8 col-md-12">
                    <div class="alert alert-info text-center" role="alert">
                        Nie ma na razie dodanych terenów
                    </div>
                </div>
            </div>
        <% } else { %>
            <div class="row" style="padding-bottom: 80px;">
                <% result.docs.forEach((territory) => { %>
                    <%- include("../partials/territory", {territory: territory, preachers}) %>
                <% }) %>
                <nav>
                    <ul class="pagination justify-content-center">
                        <% for( let index = 1; index <= result.totalPages; index++ ) { %>
                            <% if (index === result.page) { %>
                                <li class="page-item active">
                                    <a href="/territories?page=<%= index %>&limit=<%= result.limit ? result.limit : '20' %>" class="page-link"><%= index %></a>
                                </li>
                                
                            <% } else { %>
                                <li class="page-item">
                                    <a href="/territories?page=<%= index %>&limit=<%= result.limit ? result.limit : '20' %>" class="page-link"><%= index %></a>
                                </li>
                               
                            <% } %>
                        <% } %>
                    
                    </ul>
                </nav>
            </div>
        <% } %>
    </div>      
    <script src="/manageTerritorySearch.js"></script>
    <script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
        ({key: "AIzaSyDKvmIASZjDfZNXZZn2fa4pGvR6T3cQTcA", v: "weekly"});</script>
    <script src="/markerClustererCompiled.min.js"></script>
    <script>
        const locations = <%-JSON.stringify(result.docs)%>;
        const countDays = <%-countDaysFromNow%>

        console.log(countDays)

        async function initMap() {
            const { Map, InfoWindow } = await google.maps.importLibrary("maps");
            const { AdvancedMarkerElement, PinElement } = await google.maps.importLibrary("marker");
            const mainCityLatitude = document.getElementById('mainCityLatitude').innerText;
            const mainCityLongitude = document.getElementById('mainCityLongitude').innerText;
        
            const map = new google.maps.Map(
                document.getElementById("map"),
                {
                    zoom: 12,
                    center: { lat: parseFloat(mainCityLatitude), lng: parseFloat(mainCityLongitude) },
                    mapId: 'DEMO_MAP_ID',
                }
            );
        
            const infoWindow = new google.maps.InfoWindow({
                content: "",
                disableAutoPan: true,
            });
        
            const markers = [];

            locations.forEach((territory) => {
                if(territory.location){
                    const position = {
                        lat: parseFloat(territory.latitude),
                        lng: parseFloat(territory.longitude),
                    }
                    const pinGlyph = new google.maps.marker.PinElement({
                        glyph: territory.number.toString(),
                        glyphColor: "white",
                    })
                    const marker = new google.maps.marker.AdvancedMarkerElement({
                        position,
                        content: pinGlyph.element,
                    });
                
                    marker.addListener("click", () => {
                        infoWindow.setContent(`${territory.location} <br> Rodzaj: <strong>${territory.kind}</strong> <br> <strong>Teren nieopracowany od ${countDays(territory.lastWorked)} dni</strong>`);
                        infoWindow.open(map, marker);
                    });
                    markers.push(marker)
                }
            })
            
            new markerClusterer.MarkerClusterer({ markers, map });
        }
        
        initMap();
    </script>

<%- include("../partials/footer") %>